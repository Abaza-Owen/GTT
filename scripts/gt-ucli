#!/usr/bin/env python3

import sys
import os
import traceback
from gausstrajlib import translate as gt
from gausstrajlib import pdp as plt
from gausstrajlib import writer as wr
from gausstrajlib import reader as rd
from gausstrajlib import conversions as cv 

class CommandLineHandler(): #small class which helps to clean and store command line arguments
    
    translator = gt.GaussianTranslator()
    plotter = plt.DataPlot()
    reader = rd.Reader()
    writer = wr.Writer()

    def __init__(self):
        
        self.args = sys.argv
        self.num_args = len(self.args)  
        
        try:
        
            self.args = self._find_args_(self.args)

        except Exception as e:
        
            print(e)
            print(traceback.format_exc())
            self.print_usage_and_exit()

        
    def print_usage_and_exit(self):
        
        print("Incorrect number of arguments")
        print("Use: python gt-cli.py <mode> <path-in> or python gt-cli.py <path-in>")
        print("Recognized modes are -d and -f")
        print("Note that if reading a single file, the input must point to file ending in .log")
        print("See the readme file for more information")
        sys.exit(1)

    def run(self):
        modes = {
            'convert':self.convert,
            'extend':self.extend,
            'heatmap':self.heatmap,
            'group':self.sort_by_element,
            'scatter':self.scatter,
            'trim':self.trim
        }

        modes[self.args['mode']]()
    
    def extend(self):
        param = self.reader.read_g_param(self.args['input path'][0])
        datafile = self.reader.read(self.args['input path'][1])
        for trajectory in datafile.trajectories:
            if trajectory.units['dist'] != 'ang':
                trajectory.convert(cv.MSA_CONVERSIONS)
        self.writer.__write_to_gjfs__(datafile, param)


    def heatmap(self, plane = 'xy', bins = 250):
        files = self.args['input path']
        for file in files:
            datafile = self.reader.read(file)
            for trajectory in datafile.trajectories:
                if trajectory.units['dist'] != 'ang':
                    trajectory.convert(cv.MSA_CONVERSIONS)
            self.plotter.datasets.append(datafile)     

        self.plotter.heatmap(plane = plane, bins = bins)
        self.plotter.clear_datasets()

    def scatter(self): #Plots one or more trajectories read from .log, .xyz, or .npz files. Useful for understanding 
        files = self.args['input path']
        for file in files:
            datafile = self.reader.read(file)
            for trajectory in datafile.trajectories:
                if trajectory.units['dist'] != 'ang':
                    trajectory.convert(cv.MSA_CONVERSIONS)
            self.plotter.datasets.append(datafile)  

        self.plotter.scatterplot()
        self.plotter.clear_datasets()

    def sort_by_element(self):
        pass
        
    def trim(self):

        for file in self.args('input path'):
            trajectories = self.reader.read(file)
            match self.args['options']:
                case 'a':
                       pass           
                case _:
                    pass

        

    def convert(self): #Specialized function for  converting .log files to xyz files for sGDML and MSA
        try:
            self.input_path = self.args["input path"][0]   
        except Exception as e:
            print (e)


        include_gradient = True
        format = 'sgdml'
        l_b = float('-inf')
        u_b = float('inf')
        
        #if not self.input_path.endswith('.log'):
        
            #self.print_usage_and_exit()
        
        if self.args['options']: #Set appropriate parameters based on user specificed arguments
        
            if 'g' in self.args['options']:
                print('Gradients will not be included in output file')
                include_gradient = False
            
            if 'm' in self.args['options']:
                format = 'msa'
            
            if 'r' in self.args['options']:
                format = 'raw'

            if 'ec' in self.args['options']:
                try:
                    l_b = float(input("Input the minimum potential energy to be included in Hartree. (New line for no lower bound)"))
                except ValueError as e:
                    print("No valid value found. Set lower bound to negative infinity.")
                    l_b = float('-inf')
                try:
                    u_b = float(input("Input the maximum potential energy to be inlcuded in Hartree. (New line for no upper bound)"))
                except ValueError as e:

                    print("No valid value found. Set upper bound to infinity.")
                    u_b = float('inf')

            if 'd' in self.args['options']: #Convert all .log files in current working directory 
        
                directory = os.listdir(os.getcwd())
        
                for filename in directory:
        
                    if filename.endswith('.log'):
        
                        file_out = filename.split(".")[0] + ".xyz"
                        self.translate(filename, file_out, grad = include_gradient, format = format, low_e = l_b, high_e = u_b)
            else: #Convert specific .log file as chosen by user
                self.output_path = self.input_path.split(".")[0] + ".xyz" if not self.args['output path'] else self.args['output path']
                self.translate(self.input_path, self.output_path, grad = include_gradient, format = format, low_e = l_b, high_e = u_b)
 
    def translate(self, input_path, output_path, grad = True, format = 'sgdml', low_e = float('-inf'), high_e = float('inf')):
        self.translator.translate(input_path, output_path, grad = grad, format = format, low_e = low_e, high_e = high_e)
        
    def _find_args_(self, args):
        
        mode = None
        options = ' '
        input_path = []
        output_path = None

        start = 0

        for i in range(len(args)):
            if 'gt-ucli' in args[i]:
                start = i
        

        mode = args[start + 1]
        match mode:
            case 'convert' | 'group':
                for string in args:
                    if string[0] == '-':
                        options = string 
                    elif string.endswith('.log'):
                        input_path.append(string)
                    elif '.' in string and not string.endswith('ucli'):
                        output_path = string
            #case 'group':   
            case 'scatter' | 'heatmap':
                for string in args:
                    if string[0] == '-':
                        options = string 
                    elif '.' in string and not string.endswith('ucli'):
                        input_path.append(string) 
            case 'extend':
                for string in args:
                    if string[0] == '-':
                        options = string
                    elif string.endswith('.inp') or string.endswith('.log'):
                        input_path.append(string)
            case _:
                self.print_usage_and_exit()

        args = {
            'mode':mode,
            'options':options,
            'input path':input_path,
            'output path':output_path
        }
        return args     
        
cmd = CommandLineHandler()
cmd.run()
